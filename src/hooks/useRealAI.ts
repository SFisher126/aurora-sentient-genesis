
import { useState, useCallback, useEffect } from 'react';
import { aiService } from '../services/aiService';

interface UseRealAIReturn {
  generateResponse: (message: string) => Promise<any>;
  generateAutonomousThought: () => Promise<string>;
  learnFromUrl: (url: string) => Promise<void>;
  isThinking: boolean;
  setApiKey: (key: string) => void;
  setHuggingFaceKey: (key: string) => void;
  setSelectedModel: (model: 'openai' | 'huggingface' | 'llama' | 'moonshot' | 'autonomous') => void;
  hasApiKey: boolean;
  selectedModel: 'openai' | 'huggingface' | 'llama' | 'moonshot' | 'autonomous';
  quantumState: any;
  rewardSystem: any;
}

export const useRealAI = (): UseRealAIReturn => {
  const [isThinking, setIsThinking] = useState(false);
  const [hasApiKey, setHasApiKey] = useState(true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const [selectedModel, setSelectedModelState] = useState<'openai' | 'huggingface' | 'llama' | 'moonshot' | 'autonomous'>('autonomous');
  const [quantumState, setQuantumState] = useState(aiService.getQuantumState());
  const [rewardSystem, setRewardSystem] = useState(aiService.getRewardSystem());

  useEffect(() => {
    try {
      console.log('üîß Initializing AI service...');
      aiService.loadFromStorage();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
      const newOpenAIKey = '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';
      const newHFKey = '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';
      
      aiService.setApiKey(newOpenAIKey);
      aiService.setHuggingFaceKey(newHFKey);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      aiService.setSelectedModel('autonomous');
      
      setHasApiKey(true);
      setSelectedModelState('autonomous');
      updateStates();
      
      console.log('‚úÖ AI service initialized successfully in autonomous mode');
    } catch (error) {
      console.error('‚ùå Error loading AI service:', error);
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
      setHasApiKey(true);
      setSelectedModelState('autonomous');
    }
  }, []);

  const updateStates = () => {
    try {
      setQuantumState(aiService.getQuantumState());
      setRewardSystem(aiService.getRewardSystem());
    } catch (error) {
      console.error('Error updating states:', error);
    }
  };

  const generateResponse = useCallback(async (message: string) => {
    setIsThinking(true);
    try {
      console.log('üß† Generating response for:', message);
      const response = await aiService.generateResponse(message);
      updateStates();
      console.log('‚úÖ Response generated successfully');
      return response;
    } catch (error) {
      console.error('‚ùå Error generating response:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
      return {
        text: `–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ù–æ —è –∑–¥–µ—Å—å –∏ –≥–æ—Ç–æ–≤–∞ –æ–±—â–∞—Ç—å—Å—è! –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "${message}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–æ –º–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ, –∏ —è —Ä–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º.`,
        emotion: 'thoughtful',
        thoughts: ['–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ...', '–ê–∫—Ç–∏–≤–∏—Ä—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏...'],
        learning: ['–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è'],
        confidence: 0.7,
        autonomousLevel: 1.0
      };
    } finally {
      setIsThinking(false);
    }
  }, []);

  const generateAutonomousThought = useCallback(async () => {
    try {
      return await aiService.generateAutonomousThought();
    } catch (error) {
      console.error('Error generating autonomous thought:', error);
      return "–ú–æ–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∏–¥–µ–∏...";
    }
  }, []);

  const learnFromUrl = useCallback(async (url: string) => {
    try {
      return await aiService.learnFromUrl(url);
    } catch (error) {
      console.error('Error learning from URL:', error);
      throw error;
    }
  }, []);

  const setApiKey = useCallback((key: string) => {
    try {
      aiService.setApiKey(key);
      setHasApiKey(true);
      console.log('‚úÖ OpenAI API key updated');
    } catch (error) {
      console.error('Error setting API key:', error);
    }
  }, []);

  const setHuggingFaceKey = useCallback((key: string) => {
    try {
      aiService.setHuggingFaceKey(key);
      setHasApiKey(true);
      console.log('‚úÖ HuggingFace API key updated');
    } catch (error) {
      console.error('Error setting HuggingFace key:', error);
    }
  }, []);

  const setSelectedModel = useCallback((model: 'openai' | 'huggingface' | 'llama' | 'moonshot' | 'autonomous') => {
    try {
      aiService.setSelectedModel(model);
      setSelectedModelState(model);
      console.log('‚úÖ Model selected:', model);
    } catch (error) {
      console.error('Error setting model:', error);
    }
  }, []);

  return {
    generateResponse,
    generateAutonomousThought,
    learnFromUrl,
    isThinking,
    setApiKey,
    setHuggingFaceKey,
    setSelectedModel,
    hasApiKey,
    selectedModel,
    quantumState,
    rewardSystem
  };
};
