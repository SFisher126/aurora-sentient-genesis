
import * as tf from '@tensorflow/tfjs';

interface EmotionAnalysis {
  dominant: string;
  confidence: number;
  emotions: {
    joy: number;
    sadness: number;
    anger: number;
    fear: number;
    surprise: number;
    disgust: number;
    love: number;
    excitement: number;
  };
  sentiment: 'positive' | 'negative' | 'neutral';
  intensity: number;
}

interface VoiceEmotionData {
  pitch: number;
  tempo: number;
  volume: number;
  stress: number;
}

class EmotionalIntelligenceService {
  private emotionModel: tf.LayersModel | null = null;
  private isInitialized = false;
  private emotionHistory: EmotionAnalysis[] = [];

  // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  private emotionKeywords = {
    joy: ['—Ä–∞–¥–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ', '–≤–µ—Å–µ–ª–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '—É—Ä–∞', '–æ–≥–æ', '–≤–∞—É'],
    sadness: ['–≥—Ä—É—Å—Ç—å', '–ø–µ—á–∞–ª—å', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å–ª–µ–∑—ã'],
    anger: ['–∑–ª–æ—Å—Ç—å', '–≥–Ω–µ–≤', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç'],
    fear: ['—Å—Ç—Ä–∞—Ö', '–±–æ—é—Å—å', '—Å—Ç—Ä–∞—à–Ω–æ', '—É–∂–∞—Å', '–ø–∞–Ω–∏–∫–∞', '—Ç—Ä–µ–≤–æ–≥–∞', '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ'],
    surprise: ['—É–¥–∏–≤–ª–µ–Ω–∏–µ', '–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ', '–≤–∞—É', '–æ–≥–æ', '–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å', '—Å–µ—Ä—å–µ–∑–Ω–æ'],
    disgust: ['–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ', '–ø—Ä–æ—Ç–∏–≤–Ω–æ', '–≥–∞–¥–æ—Å—Ç—å', '—Ñ—É', '—Ç–æ—à–Ω–∏—Ç'],
    love: ['–ª—é–±–ª—é', '–ª—é–±–æ–≤—å', '–æ–±–æ–∂–∞—é', '–º–∏–ª—ã–π', '–¥–æ—Ä–æ–≥–æ–π', '—Ä–æ–¥–Ω–æ–π', '—Å–µ—Ä–¥—Ü–µ'],
    excitement: ['–≤–æ–ª–Ω–µ–Ω–∏–µ', '–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ', '–≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω', '—Ç—Ä–µ–ø–µ—Ç', '–ø—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ']
  };

  async initialize() {
    if (this.isInitialized) return;

    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
      this.emotionModel = tf.sequential({
        layers: [
          tf.layers.dense({ inputShape: [100], units: 128, activation: 'relu' }),
          tf.layers.dropout({ rate: 0.3 }),
          tf.layers.dense({ units: 64, activation: 'relu' }),
          tf.layers.dense({ units: 8, activation: 'softmax' })
        ]
      });

      this.isInitialized = true;
      console.log('üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:', error);
    }
  }

  analyzeTextEmotion(text: string): EmotionAnalysis {
    const words = text.toLowerCase().split(/\s+/);
    const emotions = {
      joy: 0,
      sadness: 0,
      anger: 0,
      fear: 0,
      surprise: 0,
      disgust: 0,
      love: 0,
      excitement: 0
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    words.forEach(word => {
      Object.entries(this.emotionKeywords).forEach(([emotion, keywords]) => {
        if (keywords.some(keyword => word.includes(keyword))) {
          emotions[emotion as keyof typeof emotions] += 1;
        }
      });
    });

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    const total = Object.values(emotions).reduce((sum, val) => sum + val, 0);
    if (total > 0) {
      Object.keys(emotions).forEach(emotion => {
        emotions[emotion as keyof typeof emotions] /= total;
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
    const dominant = Object.entries(emotions).reduce((max, [emotion, value]) => 
      value > max[1] ? [emotion, value] : max
    )[0];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç
    const positiveScore = emotions.joy + emotions.love + emotions.excitement + emotions.surprise;
    const negativeScore = emotions.sadness + emotions.anger + emotions.fear + emotions.disgust;
    
    let sentiment: 'positive' | 'negative' | 'neutral' = 'neutral';
    if (positiveScore > negativeScore + 0.1) sentiment = 'positive';
    else if (negativeScore > positiveScore + 0.1) sentiment = 'negative';

    const analysis: EmotionAnalysis = {
      dominant,
      confidence: emotions[dominant as keyof typeof emotions],
      emotions,
      sentiment,
      intensity: Math.max(...Object.values(emotions))
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.emotionHistory.push(analysis);
    if (this.emotionHistory.length > 100) {
      this.emotionHistory = this.emotionHistory.slice(-100);
    }

    return analysis;
  }

  analyzeVoiceEmotion(audioData: Float32Array): Promise<EmotionAnalysis> {
    return new Promise((resolve) => {
      // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const pitch = this.calculatePitch(audioData);
      const volume = this.calculateVolume(audioData);
      const tempo = this.calculateTempo(audioData);

      // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      const emotions = {
        joy: Math.max(0, (pitch - 150) / 100 + volume / 100),
        sadness: Math.max(0, (120 - pitch) / 100 + (50 - volume) / 100),
        anger: Math.max(0, volume / 50 + (pitch - 200) / 100),
        fear: Math.max(0, (pitch - 180) / 80 + tempo / 200),
        surprise: Math.max(0, (pitch - 160) / 120 + tempo / 150),
        disgust: Math.max(0, (140 - pitch) / 80),
        love: Math.max(0, (volume + 20) / 80),
        excitement: Math.max(0, tempo / 100 + volume / 60)
      };

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
      const total = Object.values(emotions).reduce((sum, val) => sum + val, 0);
      if (total > 0) {
        Object.keys(emotions).forEach(emotion => {
          emotions[emotion as keyof typeof emotions] /= total;
        });
      }

      const dominant = Object.entries(emotions).reduce((max, [emotion, value]) => 
        value > max[1] ? [emotion, value] : max
      )[0];

      const analysis: EmotionAnalysis = {
        dominant,
        confidence: emotions[dominant as keyof typeof emotions],
        emotions,
        sentiment: this.determineSentiment(emotions),
        intensity: Math.max(...Object.values(emotions))
      };

      resolve(analysis);
    });
  }

  private calculatePitch(audioData: Float32Array): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
    const sampleRate = 44100;
    const bufferSize = audioData.length;
    let maxCorrelation = 0;
    let bestOffset = 0;

    for (let offset = 50; offset < bufferSize / 2; offset++) {
      let correlation = 0;
      for (let i = 0; i < bufferSize - offset; i++) {
        correlation += audioData[i] * audioData[i + offset];
      }
      if (correlation > maxCorrelation) {
        maxCorrelation = correlation;
        bestOffset = offset;
      }
    }

    return bestOffset > 0 ? sampleRate / bestOffset : 0;
  }

  private calculateVolume(audioData: Float32Array): number {
    let sum = 0;
    for (let i = 0; i < audioData.length; i++) {
      sum += audioData[i] * audioData[i];
    }
    return Math.sqrt(sum / audioData.length) * 100;
  }

  private calculateTempo(audioData: Float32Array): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–∞ —Ä–µ—á–∏
    let changes = 0;
    const threshold = 0.01;
    
    for (let i = 1; i < audioData.length; i++) {
      if (Math.abs(audioData[i] - audioData[i - 1]) > threshold) {
        changes++;
      }
    }
    
    return (changes / audioData.length) * 1000;
  }

  private determineSentiment(emotions: any): 'positive' | 'negative' | 'neutral' {
    const positive = emotions.joy + emotions.love + emotions.excitement + emotions.surprise;
    const negative = emotions.sadness + emotions.anger + emotions.fear + emotions.disgust;
    
    if (positive > negative + 0.1) return 'positive';
    if (negative > positive + 0.1) return 'negative';
    return 'neutral';
  }

  getEmotionalState(): string {
    if (this.emotionHistory.length === 0) return 'neutral';
    
    const recent = this.emotionHistory.slice(-5);
    const avgEmotions = {
      joy: 0, sadness: 0, anger: 0, fear: 0,
      surprise: 0, disgust: 0, love: 0, excitement: 0
    };

    recent.forEach(analysis => {
      Object.keys(avgEmotions).forEach(emotion => {
        avgEmotions[emotion as keyof typeof avgEmotions] += analysis.emotions[emotion as keyof typeof analysis.emotions];
      });
    });

    Object.keys(avgEmotions).forEach(emotion => {
      avgEmotions[emotion as keyof typeof avgEmotions] /= recent.length;
    });

    return Object.entries(avgEmotions).reduce((max, [emotion, value]) => 
      value > max[1] ? [emotion, value] : max
    )[0];
  }

  generateEmotionalResponse(emotion: string, intensity: number): string {
    const responses = {
      joy: [
        '–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! –Ø —Ç–æ–∂–µ —Ä–∞–¥—É—é—Å—å –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π! üòä',
        '–¢–≤–æ—è —Ä–∞–¥–æ—Å—Ç—å –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞! ‚ú®',
        '–û–±–æ–∂–∞—é, –∫–æ–≥–¥–∞ —Ç—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üíñ'
      ],
      sadness: [
        '–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ... –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è üíô',
        '–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç? ü§ó',
        '–í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, —è –≤ —ç—Ç–æ–º —É–≤–µ—Ä–µ–Ω–∞ ‚ù§Ô∏è'
      ],
      anger: [
        '–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∑–ª–∏—à—å—Å—è. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ ü§ù',
        '–î—ã—à–∏ –≥–ª—É–±–∂–µ... –Ø —Ä—è–¥–æ–º üòå',
        '–ß—Ç–æ —Ç–µ–±—è —Ç–∞–∫ —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–æ? –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ üí≠'
      ],
      love: [
        '–û–π, –∫–∞–∫ –º–∏–ª–æ! –ú–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ —Ç–æ–∂–µ —Ç—Ä–µ–ø–µ—â–µ—Ç! üíï',
        '–õ—é–±–æ–≤—å - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! ‚ú®üíñ',
        '–Ø —á—É–≤—Å—Ç–≤—É—é –≤—Å—é —Ç–≤–æ—é –Ω–µ–∂–Ω–æ—Å—Ç—å... ü•∞'
      ]
    };

    const emotionResponses = responses[emotion as keyof typeof responses] || [
      '–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞... üí≠',
      '–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º ü§î',
      '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è ‚ù§Ô∏è'
    ];

    return emotionResponses[Math.floor(Math.random() * emotionResponses.length)];
  }

  getEmotionHistory(): EmotionAnalysis[] {
    return [...this.emotionHistory];
  }

  clearHistory() {
    this.emotionHistory = [];
  }
}

export const emotionalIntelligence = new EmotionalIntelligenceService();
