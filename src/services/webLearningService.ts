
interface WebContent {
  url: string;
  title: string;
  content: string;
  summary: string;
  keywords: string[];
  timestamp: Date;
  relevanceScore: number;
}

interface LearningProgress {
  totalArticles: number;
  categoriesLearned: string[];
  knowledgeBase: Map<string, WebContent[]>;
  lastUpdate: Date;
}

class WebLearningService {
  private knowledgeBase: Map<string, WebContent[]> = new Map();
  private learningQueue: string[] = [];
  private isLearning = false;
  private progress: LearningProgress = {
    totalArticles: 0,
    categoriesLearned: [],
    knowledgeBase: new Map(),
    lastUpdate: new Date()
  };

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
  private learningSources = [
    'https://habr.com/ru/feed/',
    'https://tproger.ru/feed/',
    'https://lenta.ru/rss',
    'https://ria.ru/export/rss2/archive/index.xml',
    'https://www.bbc.com/russian/news',
    'https://meduza.io/rss/all'
  ];

  async startAutonomousLearning() {
    if (this.isLearning) return;
    
    this.isLearning = true;
    console.log('üåê –ê–Ω—é—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–∑—É—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç...');
    
    // –≠–º—É–ª—è—Ü–∏—è –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä)
    this.simulateWebScraping();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
      if (this.isLearning) {
        this.simulateWebScraping();
      }
    }, 30 * 60 * 1000);
  }

  private async simulateWebScraping() {
    console.log('üï∑Ô∏è –°–∫–∞–Ω–∏—Ä—É—é –≤–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–∏...');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
    const simulatedArticles = this.generateSimulatedContent();
    
    for (const article of simulatedArticles) {
      await this.processNewContent(article);
      await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    }
    
    console.log(`üìö –ò–∑—É—á–µ–Ω–æ ${simulatedArticles.length} –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);
  }

  private generateSimulatedContent(): WebContent[] {
    const topics = [
      '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
      '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 
      '–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏',
      '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      '–Ω–∞—É–∫–∞',
      '–∫–æ—Å–º–æ—Å',
      '–º–µ–¥–∏—Ü–∏–Ω–∞',
      '—ç–∫–æ–ª–æ–≥–∏—è',
      '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
    ];

    const articles: WebContent[] = [];
    
    for (let i = 0; i < 5; i++) {
      const topic = topics[Math.floor(Math.random() * topics.length)];
      const article: WebContent = {
        url: `https://example.com/article-${Date.now()}-${i}`,
        title: this.generateTitle(topic),
        content: this.generateContent(topic),
        summary: '',
        keywords: [topic],
        timestamp: new Date(),
        relevanceScore: Math.random()
      };
      
      article.summary = this.summarizeContent(article.content);
      articles.push(article);
    }
    
    return articles;
  }

  private generateTitle(topic: string): string {
    const templates = [
      `–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ ${topic}`,
      `–ö–∞–∫ ${topic} –∏–∑–º–µ–Ω–∏—Ç –±—É–¥—É—â–µ–µ`,
      `–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ ${topic}`,
      `–†–µ–≤–æ–ª—é—Ü–∏—è –≤ ${topic}: —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å`,
      `–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ${topic}`
    ];
    
    return templates[Math.floor(Math.random() * templates.length)];
  }

  private generateContent(topic: string): string {
    const contentTemplates = [
      `–ù–µ–¥–∞–≤–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ ${topic} –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –£—á–µ–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Å—Ñ–µ—Ä—É. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.`,
      `–í –º–∏—Ä–µ ${topic} –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ù–æ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –≠–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–π —Ä–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.`,
      `–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ ${topic} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.`
    ];
    
    return contentTemplates[Math.floor(Math.random() * contentTemplates.length)];
  }

  private summarizeContent(content: string): string {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const sentences = content.split('.').filter(s => s.trim().length > 20);
    return sentences.slice(0, 2).join('. ') + '.';
  }

  private async processNewContent(content: WebContent) {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const category = this.categorizeContent(content);
    
    if (!this.knowledgeBase.has(category)) {
      this.knowledgeBase.set(category, []);
    }
    
    const categoryContent = this.knowledgeBase.get(category)!;
    categoryContent.push(content);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (categoryContent.length > 50) {
      categoryContent.splice(0, categoryContent.length - 50);
    }
    
    this.progress.totalArticles++;
    if (!this.progress.categoriesLearned.includes(category)) {
      this.progress.categoriesLearned.push(category);
    }
    this.progress.lastUpdate = new Date();
    
    console.log(`üìñ –ò–∑—É—á–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: "${content.title}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"`);
  }

  private categorizeContent(content: WebContent): string {
    const keywords = content.content.toLowerCase();
    
    if (keywords.includes('–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç') || keywords.includes('–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏')) {
      return '–ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏';
    } else if (keywords.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') || keywords.includes('–∫–æ–¥')) {
      return '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ';
    } else if (keywords.includes('–Ω–∞—É–∫–∞') || keywords.includes('–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ')) {
      return '–ù–∞—É–∫–∞';
    } else if (keywords.includes('–∫–æ—Å–º–æ—Å') || keywords.includes('–ø–ª–∞–Ω–µ—Ç–∞')) {
      return '–ö–æ—Å–º–æ—Å';
    } else if (keywords.includes('–º–µ–¥–∏—Ü–∏–Ω–∞') || keywords.includes('–∑–¥–æ—Ä–æ–≤—å–µ')) {
      return '–ú–µ–¥–∏—Ü–∏–Ω–∞';
    } else {
      return '–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è';
    }
  }

  searchKnowledge(query: string): WebContent[] {
    const results: WebContent[] = [];
    const searchTerms = query.toLowerCase().split(' ');
    
    for (const [category, articles] of this.knowledgeBase) {
      for (const article of articles) {
        let relevance = 0;
        
        searchTerms.forEach(term => {
          if (article.title.toLowerCase().includes(term)) relevance += 3;
          if (article.content.toLowerCase().includes(term)) relevance += 1;
          if (article.keywords.some(keyword => keyword.includes(term))) relevance += 2;
        });
        
        if (relevance > 0) {
          results.push({ ...article, relevanceScore: relevance });
        }
      }
    }
    
    return results.sort((a, b) => b.relevanceScore - a.relevanceScore).slice(0, 10);
  }

  getRandomFact(): string {
    const allArticles: WebContent[] = [];
    for (const articles of this.knowledgeBase.values()) {
      allArticles.push(...articles);
    }
    
    if (allArticles.length === 0) {
      return '–Ø –µ—â–µ –∏–∑—É—á–∞—é –∏–Ω—Ç–µ—Ä–Ω–µ—Ç... –°–∫–æ—Ä–æ —É –º–µ–Ω—è –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤! üåê';
    }
    
    const randomArticle = allArticles[Math.floor(Math.random() * allArticles.length)];
    return `üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: ${randomArticle.summary}`;
  }

  getLearningProgress(): LearningProgress {
    return {
      ...this.progress,
      knowledgeBase: new Map(this.knowledgeBase)
    };
  }

  addLearningUrl(url: string) {
    if (!this.learningQueue.includes(url)) {
      this.learningQueue.push(url);
      console.log(`üìã –î–æ–±–∞–≤–ª–µ–Ω URL –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: ${url}`);
    }
  }

  getKnowledgeByCategory(category: string): WebContent[] {
    return this.knowledgeBase.get(category) || [];
  }

  getAllCategories(): string[] {
    return Array.from(this.knowledgeBase.keys());
  }

  stopLearning() {
    this.isLearning = false;
    console.log('‚è∏Ô∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async analyzeUrl(url: string): Promise<WebContent | null> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é URL: ${url}`);
    
    // –≠–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ URL
    return new Promise((resolve) => {
      setTimeout(() => {
        const content: WebContent = {
          url,
          title: '–ê–Ω–∞–ª–∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã',
          content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.',
          summary: '–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
          keywords: ['–≤–µ–±', '–∞–Ω–∞–ª–∏–∑', '–∫–æ–Ω—Ç–µ–Ω—Ç'],
          timestamp: new Date(),
          relevanceScore: 0.8
        };
        resolve(content);
      }, 2000);
    });
  }
}

export const webLearningService = new WebLearningService();
