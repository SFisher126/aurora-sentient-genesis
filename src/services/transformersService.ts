import { pipeline, env } from '@huggingface/transformers';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
env.allowRemoteModels = true;
env.allowLocalModels = false;

class TransformersService {
  private textClassifier: any = null;
  private textGenerator: any = null;
  private sentimentAnalyzer: any = null;
  private initialized = false;

  async initialize() {
    if (this.initialized) return;
    
    try {
      console.log('ü§ó Initializing Transformers models...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      this.sentimentAnalyzer = await pipeline('sentiment-analysis', 'Xenova/distilbert-base-uncased-finetuned-sst-2-english');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–µ–π
      this.textGenerator = await pipeline('text-generation', 'Xenova/gpt2-small', {
        quantized: false
      });
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
      this.textClassifier = await pipeline('text-classification', 'Xenova/distilbert-base-uncased-finetuned-sst-2-english');
      
      this.initialized = true;
      console.log('‚úÖ Transformers models initialized successfully!');
    } catch (error) {
      console.error('‚ùå Error initializing Transformers:', error);
    }
  }

  async analyzeSentiment(text: string) {
    if (!this.initialized) await this.initialize();
    
    try {
      if (!this.sentimentAnalyzer) return { label: 'NEUTRAL', score: 0.5 };
      
      const result = await this.sentimentAnalyzer(text);
      return result[0] || { label: 'NEUTRAL', score: 0.5 };
    } catch (error) {
      console.error('Error analyzing sentiment:', error);
      return { label: 'NEUTRAL', score: 0.5 };
    }
  }

  async generateText(prompt: string, maxLength: number = 50) {
    if (!this.initialized) await this.initialize();
    
    try {
      if (!this.textGenerator) return prompt + '...';
      
      const result = await this.textGenerator(prompt, { 
        max_length: maxLength,
        temperature: 0.8,
        do_sample: true
      });
      
      return result[0]?.generated_text || prompt + '...';
    } catch (error) {
      console.error('Error generating text:', error);
      return prompt + '...';
    }
  }

  async classifyText(text: string) {
    if (!this.initialized) await this.initialize();
    
    try {
      if (!this.textClassifier) return { label: 'UNKNOWN', score: 0.5 };
      
      const result = await this.textClassifier(text);
      return result[0] || { label: 'UNKNOWN', score: 0.5 };
    } catch (error) {
      console.error('Error classifying text:', error);
      return { label: 'UNKNOWN', score: 0.5 };
    }
  }

  async enhanceAIResponse(userMessage: string, aiResponse: string) {
    if (!this.initialized) await this.initialize();
    
    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userSentiment = await this.analyzeSentiment(userMessage);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ò–ò
      const aiSentiment = await this.analyzeSentiment(aiResponse);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let enhancedResponse = aiResponse;
      
      if (userSentiment.label === 'NEGATIVE' && userSentiment.score > 0.8) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω, –¥–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–º
        const supportivePrompt = `–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω. ${aiResponse}`;
        enhancedResponse = await this.generateText(supportivePrompt, 100);
      }
      
      return {
        text: enhancedResponse,
        userSentiment,
        aiSentiment,
        enhanced: enhancedResponse !== aiResponse
      };
    } catch (error) {
      console.error('Error enhancing AI response:', error);
      return {
        text: aiResponse,
        userSentiment: { label: 'NEUTRAL', score: 0.5 },
        aiSentiment: { label: 'NEUTRAL', score: 0.5 },
        enhanced: false
      };
    }
  }
}

export const transformersService = new TransformersService();