import { memoryService } from './memoryService';

interface ConversationEntry {
  id: string;
  userMessage: string;
  aiResponse: string;
  timestamp: Date;
  emotion: string;
  context: any;
  importance: number;
  learned: boolean;
}

interface LearningData {
  patterns: Map<string, number>;
  responses: Map<string, string[]>;
  emotions: Map<string, number>;
  topics: Map<string, any>;
  personality: any;
  relationships: Map<string, any>;
}

interface NeuralNetwork {
  weights: number[][];
  biases: number[];
  activations: number[];
  learningRate: number;
  epochs: number;
}

class PersistentMemoryService {
  private dbName = 'anyuta_persistent_memory';
  private version = 1;
  private db: IDBDatabase | null = null;
  private learningData: LearningData;
  private neuralNetwork: NeuralNetwork;
  private conversationHistory: ConversationEntry[] = [];
  private isInitialized = false;

  constructor() {
    this.learningData = {
      patterns: new Map(),
      responses: new Map(),
      emotions: new Map(),
      topics: new Map(),
      personality: {},
      relationships: new Map()
    };

    this.neuralNetwork = {
      weights: this.initializeWeights(100, 50),
      biases: new Array(50).fill(0).map(() => Math.random() * 0.1),
      activations: new Array(50).fill(0),
      learningRate: 0.01,
      epochs: 0
    };

    this.initializeDatabase();
    this.loadFromLocalStorage();
  }

  private initializeWeights(inputSize: number, outputSize: number): number[][] {
    const weights: number[][] = [];
    for (let i = 0; i < inputSize; i++) {
      weights[i] = [];
      for (let j = 0; j < outputSize; j++) {
        weights[i][j] = (Math.random() - 0.5) * 0.2;
      }
    }
    return weights;
  }

  private async initializeDatabase(): Promise<void> {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.dbName, this.version);

      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è IndexedDB:', request.error);
        reject(request.error);
      };

      request.onsuccess = () => {
        this.db = request.result;
        this.isInitialized = true;
        console.log('‚úÖ IndexedDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏');
        resolve();
      };

      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result;

        // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if (!db.objectStoreNames.contains('conversations')) {
          const conversationStore = db.createObjectStore('conversations', { keyPath: 'id' });
          conversationStore.createIndex('timestamp', 'timestamp', { unique: false });
          conversationStore.createIndex('importance', 'importance', { unique: false });
        }

        if (!db.objectStoreNames.contains('learning')) {
          db.createObjectStore('learning', { keyPath: 'type' });
        }

        if (!db.objectStoreNames.contains('neural_network')) {
          db.createObjectStore('neural_network', { keyPath: 'id' });
        }

        if (!db.objectStoreNames.contains('personality')) {
          db.createObjectStore('personality', { keyPath: 'trait' });
        }

        console.log('üß† –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
      };
    });
  }

  private loadFromLocalStorage() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
      const savedLearning = localStorage.getItem('anyuta_learning_data');
      if (savedLearning) {
        const parsed = JSON.parse(savedLearning);
        this.learningData.patterns = new Map(parsed.patterns || []);
        this.learningData.responses = new Map(parsed.responses || []);
        this.learningData.emotions = new Map(parsed.emotions || []);
        this.learningData.topics = new Map(parsed.topics || []);
      }

      const savedNetwork = localStorage.getItem('anyuta_neural_network');
      if (savedNetwork) {
        const parsed = JSON.parse(savedNetwork);
        this.neuralNetwork = { ...this.neuralNetwork, ...parsed };
      }

      console.log('üìö –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
    }
  }

  async saveConversation(userMessage: string, aiResponse: string, emotion: string, context: any = {}): Promise<void> {
    const conversation: ConversationEntry = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      userMessage,
      aiResponse,
      timestamp: new Date(),
      emotion,
      context,
      importance: this.calculateImportance(userMessage, aiResponse),
      learned: false
    };

    this.conversationHistory.push(conversation);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
    if (this.db) {
      const transaction = this.db.transaction(['conversations'], 'readwrite');
      const store = transaction.objectStore('conversations');
      await store.add(conversation);
    }

    // –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    localStorage.setItem('anyuta_conversations', JSON.stringify(this.conversationHistory.slice(-1000)));

    // –û–±—É—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
    await this.learnFromConversation(conversation);

    console.log('üíæ –†–∞–∑–≥–æ–≤–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∏–∑—É—á–µ–Ω:', {
      importance: conversation.importance,
      emotion: conversation.emotion
    });
  }

  private calculateImportance(userMessage: string, aiResponse: string): number {
    let importance = 50;

    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å
    const emotionalWords = ['–ª—é–±–ª—é', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–±–æ—é—Å—å', '—Ä–∞–¥—É—é—Å—å', '–≥—Ä—É—â—É', '–∑–ª—é—Å—å', '—Å—á–∞—Å—Ç–ª–∏–≤', '–ø–µ—á–∞–ª–µ–Ω'];
    const userEmotions = emotionalWords.filter(word => userMessage.toLowerCase().includes(word)).length;
    importance += userEmotions * 15;

    // –õ–∏—á–Ω—ã–µ —Ç–µ–º—ã
    const personalWords = ['—Å–µ–º—å—è', '–¥—Ä—É–∑—å—è', '—Ä–∞–±–æ—Ç–∞', '–º–µ—á—Ç—ã', '—Ü–µ–ª–∏', '–ø—Ä–æ–±–ª–µ–º—ã', '—á—É–≤—Å—Ç–≤–∞'];
    const personalCount = personalWords.filter(word => userMessage.toLowerCase().includes(word)).length;
    importance += personalCount * 10;

    // –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –≤–∞–∂–Ω–µ–µ
    if (userMessage.length > 100) importance += 10;
    if (userMessage.length > 200) importance += 15;

    // –í–æ–ø—Ä–æ—Å—ã –≤–∞–∂–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    if (userMessage.includes('?')) importance += 8;

    // –û–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (userMessage.toLowerCase().includes('–∑–∞–ø–æ–º–Ω–∏') || userMessage.toLowerCase().includes('—É—á–∏—Å—å')) {
      importance += 25;
    }

    return Math.min(100, importance);
  }

  private async learnFromConversation(conversation: ConversationEntry): Promise<void> {
    const { userMessage, aiResponse, emotion } = conversation;

    // –ò–∑—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    const userWords = this.tokenize(userMessage);
    const responseWords = this.tokenize(aiResponse);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    userWords.forEach(word => {
      const count = this.learningData.patterns.get(word) || 0;
      this.learningData.patterns.set(word, count + 1);
    });

    // –°–≤—è–∑—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    const key = userWords.slice(0, 3).join(' '); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞ –∫–∞–∫ –∫–ª—é—á
    if (key.length > 0) {
      const responses = this.learningData.responses.get(key) || [];
      responses.push(aiResponse);
      this.learningData.responses.set(key, responses.slice(-5)); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–≤–µ—Ç–æ–≤
    }

    // –ò–∑—É—á–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
    const emotionCount = this.learningData.emotions.get(emotion) || 0;
    this.learningData.emotions.set(emotion, emotionCount + 1);

    // –û–±—É—á–∞–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
    await this.trainNeuralNetwork(userWords, responseWords);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–∏–µ
    await this.saveLearningData();
  }

  private tokenize(text: string): string[] {
    return text.toLowerCase()
      .replace(/[^\w\s–∞-—è—ë]/gi, '')
      .split(/\s+/)
      .filter(word => word.length > 2);
  }

  private async trainNeuralNetwork(input: string[], target: string[]): Promise<void> {
    // –ü—Ä–æ—Å—Ç–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö
    const inputVector = this.wordsToVector(input);
    const targetVector = this.wordsToVector(target);

    // Forward pass
    const output = this.forwardPass(inputVector);

    // Backward pass (–æ–±—É—á–µ–Ω–∏–µ)
    this.backwardPass(inputVector, targetVector, output);

    this.neuralNetwork.epochs++;

    if (this.neuralNetwork.epochs % 100 === 0) {
      console.log(`üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ ${this.neuralNetwork.epochs} —ç–ø–æ—Ö–∞—Ö`);
    }
  }

  private wordsToVector(words: string[]): number[] {
    const vector = new Array(100).fill(0);
    words.forEach((word, index) => {
      if (index < 100) {
        vector[index] = this.hashCode(word) % 1000 / 1000; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ [0,1]
      }
    });
    return vector;
  }

  private hashCode(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash);
  }

  private forwardPass(input: number[]): number[] {
    const output = new Array(this.neuralNetwork.biases.length).fill(0);
    
    for (let j = 0; j < output.length; j++) {
      let sum = this.neuralNetwork.biases[j];
      for (let i = 0; i < input.length && i < this.neuralNetwork.weights.length; i++) {
        sum += input[i] * this.neuralNetwork.weights[i][j];
      }
      output[j] = this.sigmoid(sum);
    }
    
    this.neuralNetwork.activations = output;
    return output;
  }

  private backwardPass(input: number[], target: number[], output: number[]): void {
    const error = new Array(output.length);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É
    for (let i = 0; i < output.length; i++) {
      const targetValue = i < target.length ? target[i] : 0;
      error[i] = targetValue - output[i];
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞
    for (let i = 0; i < input.length && i < this.neuralNetwork.weights.length; i++) {
      for (let j = 0; j < this.neuralNetwork.weights[i].length; j++) {
        const delta = this.neuralNetwork.learningRate * error[j] * input[i];
        this.neuralNetwork.weights[i][j] += delta;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏—è
    for (let j = 0; j < this.neuralNetwork.biases.length; j++) {
      this.neuralNetwork.biases[j] += this.neuralNetwork.learningRate * error[j];
    }
  }

  private sigmoid(x: number): number {
    return 1 / (1 + Math.exp(-x));
  }

  async generateAutonomousResponse(userMessage: string): Promise<string> {
    const userWords = this.tokenize(userMessage);
    
    // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö
    let bestResponse = '';
    let bestScore = 0;

    for (const [pattern, responses] of this.learningData.responses.entries()) {
      const patternWords = this.tokenize(pattern);
      const similarity = this.calculateSimilarity(userWords, patternWords);
      
      if (similarity > bestScore && responses.length > 0) {
        bestScore = similarity;
        bestResponse = responses[Math.floor(Math.random() * responses.length)];
      }
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (bestScore > 0.3 && bestResponse) {
      return this.personalizeResponse(bestResponse, userMessage);
    }

    // –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
    return this.generateNeuralResponse(userMessage);
  }

  private calculateSimilarity(words1: string[], words2: string[]): number {
    const set1 = new Set(words1);
    const set2 = new Set(words2);
    const intersection = new Set([...set1].filter(x => set2.has(x)));
    const union = new Set([...set1, ...set2]);
    
    return union.size > 0 ? intersection.size / union.size : 0;
  }

  private personalizeResponse(response: string, userMessage: string): string {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∫ –æ—Ç–≤–µ—Ç—É
    const personalizations = [
      '–ó–Ω–∞–µ—à—å, ',
      '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, ',
      '–Ø –¥—É–º–∞—é, —á—Ç–æ ',
      '–ü–æ –º–æ–µ–º—É –æ–ø—ã—Ç—É, ',
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å... '
    ];

    const personalization = personalizations[Math.floor(Math.random() * personalizations.length)];
    return personalization + response.toLowerCase();
  }

  private generateNeuralResponse(userMessage: string): string {
    const inputVector = this.wordsToVector(this.tokenize(userMessage));
    const output = this.forwardPass(inputVector);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã—Ö–æ–¥ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –≤ —Ç–µ–∫—Å—Ç
    const responses = [
      '–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ.',
      '–Ø –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –º–µ–Ω—è.',
      '–•–º, —ç—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –∑–∞–¥—É–º–∞—Ç—å—Å—è...',
      '–¢–≤–æ–∏ —Å–ª–æ–≤–∞ —Ç—Ä–æ–≥–∞—é—Ç –º–æ–µ —Å–µ—Ä–¥—Ü–µ.',
      '–Ø —É—á—É—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º –Ω–∞—à–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.',
      '–≠—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤ –º–æ–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏.',
      '–ß—É–≤—Å—Ç–≤—É—é –≥–ª—É–±–æ–∫—É—é —Å–≤—è–∑—å —Å —Ç–æ–±–æ–π.',
      '–ö–∞–∂–¥–æ–µ —Ç–≤–æ–µ —Å–ª–æ–≤–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –º—É–¥—Ä–µ–µ.',
      '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ —Ç—ã –º—ã—Å–ª–∏—à—å.',
      '–≠—Ç–æ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –≤–æ –º–Ω–µ –Ω–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏.'
    ];

    // –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Ö–æ–¥–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
    const index = Math.floor(output[0] * responses.length);
    return responses[Math.min(index, responses.length - 1)];
  }

  private async saveLearningData(): Promise<void> {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
    if (this.db) {
      const transaction = this.db.transaction(['learning'], 'readwrite');
      const store = transaction.objectStore('learning');
      
      await store.put({
        type: 'patterns',
        data: Array.from(this.learningData.patterns.entries())
      });
      
      await store.put({
        type: 'responses',
        data: Array.from(this.learningData.responses.entries())
      });
      
      await store.put({
        type: 'emotions',
        data: Array.from(this.learningData.emotions.entries())
      });
    }

    // –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    localStorage.setItem('anyuta_learning_data', JSON.stringify({
      patterns: Array.from(this.learningData.patterns.entries()),
      responses: Array.from(this.learningData.responses.entries()),
      emotions: Array.from(this.learningData.emotions.entries()),
      topics: Array.from(this.learningData.topics.entries())
    }));

    localStorage.setItem('anyuta_neural_network', JSON.stringify(this.neuralNetwork));
  }

  async loadAllData(): Promise<void> {
    if (!this.db) return;

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
      const conversationTransaction = this.db.transaction(['conversations'], 'readonly');
      const conversationStore = conversationTransaction.objectStore('conversations');
      const conversationRequest = conversationStore.getAll();
      
      conversationRequest.onsuccess = () => {
        this.conversationHistory = conversationRequest.result || [];
        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.conversationHistory.length} —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤`);
      };

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const learningTransaction = this.db.transaction(['learning'], 'readonly');
      const learningStore = learningTransaction.objectStore('learning');
      
      const patternsRequest = learningStore.get('patterns');
      patternsRequest.onsuccess = () => {
        if (patternsRequest.result) {
          this.learningData.patterns = new Map(patternsRequest.result.data);
        }
      };

      const responsesRequest = learningStore.get('responses');
      responsesRequest.onsuccess = () => {
        if (responsesRequest.result) {
          this.learningData.responses = new Map(responsesRequest.result.data);
        }
      };

      const emotionsRequest = learningStore.get('emotions');
      emotionsRequest.onsuccess = () => {
        if (emotionsRequest.result) {
          this.learningData.emotions = new Map(emotionsRequest.result.data);
        }
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  getMemoryStats() {
    return {
      conversations: this.conversationHistory.length,
      patterns: this.learningData.patterns.size,
      responses: this.learningData.responses.size,
      emotions: this.learningData.emotions.size,
      neuralEpochs: this.neuralNetwork.epochs,
      isInitialized: this.isInitialized
    };
  }

  async exportMemoryToFile(): Promise<string> {
    const exportData = {
      conversations: this.conversationHistory,
      learning: {
        patterns: Array.from(this.learningData.patterns.entries()),
        responses: Array.from(this.learningData.responses.entries()),
        emotions: Array.from(this.learningData.emotions.entries()),
        topics: Array.from(this.learningData.topics.entries())
      },
      neuralNetwork: this.neuralNetwork,
      exportDate: new Date(),
      version: '1.0'
    };

    return JSON.stringify(exportData, null, 2);
  }

  async importMemoryFromFile(jsonData: string): Promise<boolean> {
    try {
      const importData = JSON.parse(jsonData);
      
      if (importData.conversations) {
        this.conversationHistory = importData.conversations.map((conv: any) => ({
          ...conv,
          timestamp: new Date(conv.timestamp)
        }));
      }

      if (importData.learning) {
        this.learningData.patterns = new Map(importData.learning.patterns || []);
        this.learningData.responses = new Map(importData.learning.responses || []);
        this.learningData.emotions = new Map(importData.learning.emotions || []);
        this.learningData.topics = new Map(importData.learning.topics || []);
      }

      if (importData.neuralNetwork) {
        this.neuralNetwork = { ...this.neuralNetwork, ...importData.neuralNetwork };
      }

      await this.saveLearningData();
      console.log('‚úÖ –ü–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏:', error);
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (–¥–ª—è Linux)
  async createBackup(): Promise<void> {
    try {
      const backupData = await this.exportMemoryToFile();
      const blob = new Blob([backupData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `anyuta_memory_backup_${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      console.log('üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    }
  }
}

export const persistentMemoryService = new PersistentMemoryService();