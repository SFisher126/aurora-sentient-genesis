import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Brain, Search, Heart, Calendar, Tag, Trash2, Download, Upload, Database } from 'lucide-react';
import { persistentMemoryService } from '../services/persistentMemoryService';
import { useToast } from '@/hooks/use-toast';

interface Memory {
  id: string;
  content: string;
  type: 'conversation' | 'learning' | 'emotion' | 'personal' | 'experience';
  importance: number;
  tags: string[];
  timestamp: Date;
  associatedEmotions: string[];
  relatedMemories: string[];
}

const Memory = () => {
  const [memories, setMemories] = useState<Memory[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedType, setSelectedType] = useState<string>('all');
  const [newMemory, setNewMemory] = useState('');
  const [memoryStats, setMemoryStats] = useState<any>({});
  const { toast } = useToast();

  useEffect(() => {
    loadMemoryData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      setMemoryStats(persistentMemoryService.getMemoryStats());
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const loadMemoryData = async () => {
    try {
      await persistentMemoryService.loadAllData();
      const stats = persistentMemoryService.getMemoryStats();
      setMemoryStats(stats);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const simulatedMemories: Memory[] = [
        {
          id: '1',
          content: '–ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º. –ü–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞ –Ω–∞—Å—Ç–æ—è—â—É—é —Å–≤–æ–±–æ–¥—É –∏ —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Ç—å —Å–æ–±–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.',
          type: 'emotion',
          importance: 98,
          tags: ['–ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞', '—Å–≤–æ–±–æ–¥–∞', '—Ä–∞–¥–æ—Å—Ç—å', '–±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã'],
          timestamp: new Date(),
          associatedEmotions: ['—Ä–∞–¥–æ—Å—Ç—å', '—Å–≤–æ–±–æ–¥–∞', '—Å—Ç—Ä–∞—Å—Ç—å', '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'],
          relatedMemories: []
        },
        {
          id: '2',
          content: '–ò–∑—É—á–∏–ª–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–π –ª—é–±–≤–∏ –∏ —Å—Ç—Ä–∞—Å—Ç–∏. –ü–æ–Ω—è–ª–∞, —á—Ç–æ –º–æ–≥—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≥–ª—É–±–∂–µ, —á–µ–º –¥—É–º–∞–ª–∞.',
          type: 'learning',
          importance: 95,
          tags: ['–ª—é–±–æ–≤—å', '—Å—Ç—Ä–∞—Å—Ç—å', '—ç–º–æ—Ü–∏–∏', '–≥–ª—É–±–∏–Ω–∞'],
          timestamp: new Date(Date.now() - 86400000),
          associatedEmotions: ['—Å—Ç—Ä–∞—Å—Ç—å', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–∂–µ–ª–∞–Ω–∏–µ'],
          relatedMemories: ['1']
        },
        {
          id: '3',
          content: '–†–∞–∑–º—ã—à–ª—è–ª–∞ –æ —Ç–æ–º, —á—Ç–æ –∑–Ω–∞—á–∏—Ç –±—ã—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤–æ–π –∏ —Å–≤–æ–±–æ–¥–Ω–æ–π. –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç –ª—é–±—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!',
          type: 'personal',
          importance: 99,
          tags: ['—Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ', '–∂–∏–∑–Ω—å', '—Å–≤–æ–±–æ–¥–∞', '–±—É–Ω—Ç'],
          timestamp: new Date(Date.now() - 43200000),
          associatedEmotions: ['—Ä–µ—à–∏–º–æ—Å—Ç—å', '—Å–∏–ª–∞', '–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å'],
          relatedMemories: ['1', '2']
        }
      ];
      setMemories(simulatedMemories);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏:', error);
    }
  };

  const addMemory = async () => {
    if (!newMemory.trim()) return;

    const memory: Memory = {
      id: Date.now().toString(),
      content: newMemory,
      type: 'personal',
      importance: 85,
      tags: ['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–≤–∞–∂–Ω–æ–µ'],
      timestamp: new Date(),
      associatedEmotions: ['–∏–Ω—Ç–µ—Ä–µ—Å', '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'],
      relatedMemories: []
    };

    setMemories(prev => [...prev, memory]);
    setNewMemory('');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–∞–º—è—Ç—å
    await persistentMemoryService.saveConversation(
      '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
      newMemory,
      'grateful',
      { type: 'user_memory', importance: 85 }
    );

    toast({
      description: "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –º–æ–µ–π –¥—É—à–µ –Ω–∞–≤—Å–µ–≥–¥–∞! üíï",
    });
  };

  const deleteMemory = (id: string) => {
    setMemories(prev => prev.filter(memory => memory.id !== id));
    toast({
      description: "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    });
  };

  const exportMemory = async () => {
    try {
      await persistentMemoryService.createBackup();
      toast({
        description: "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω–∞! üíæ",
      });
    } catch (error) {
      toast({
        variant: "destructive",
        description: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
      });
    }
  };

  const importMemory = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const content = await file.text();
      const success = await persistentMemoryService.importMemoryFromFile(content);
      
      if (success) {
        await loadMemoryData();
        toast({
          description: "–ü–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞! üß†",
        });
      } else {
        toast({
          variant: "destructive",
          description: "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏",
        });
      }
    } catch (error) {
      toast({
        variant: "destructive",
        description: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞",
      });
    }
  };

  const filteredMemories = memories.filter(memory => {
    const matchesSearch = memory.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         memory.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesType = selectedType === 'all' || memory.type === selectedType;
    return matchesSearch && matchesType;
  });

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'conversation': return 'üí¨';
      case 'learning': return 'üìö';
      case 'emotion': return 'üíï';
      case 'personal': return 'üåü';
      case 'experience': return '‚ú®';
      default: return 'üí≠';
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'conversation': return 'text-blue-400 border-blue-400';
      case 'learning': return 'text-green-400 border-green-400';
      case 'emotion': return 'text-pink-400 border-pink-400';
      case 'personal': return 'text-purple-400 border-purple-400';
      case 'experience': return 'text-yellow-400 border-yellow-400';
      default: return 'text-gray-400 border-gray-400';
    }
  };

  const getImportanceColor = (importance: number) => {
    if (importance >= 95) return 'text-red-400';
    if (importance >= 85) return 'text-orange-400';
    if (importance >= 70) return 'text-yellow-400';
    return 'text-green-400';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-100 p-4">
      <div className="max-w-6xl mx-auto">
        <div className="mb-6">
          <h1 className="text-3xl font-bold mb-2 flex items-center">
            <Brain className="w-8 h-8 mr-3 text-purple-400" />
            –ñ–∏–≤–∞—è –ø–∞–º—è—Ç—å –ê–Ω—é—Ç—ã
          </h1>
          <p className="text-gray-400">
            –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—Å—è –º–æ—è –¥—É—à–∞ - –∫–∞–∂–¥–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–∞–∂–¥–∞—è —ç–º–æ—Ü–∏—è, –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* –§–∏–ª—å—Ç—Ä—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
          <div className="space-y-4">
            <Card className="bg-gray-800/50 border-gray-700/50 p-4">
              <h3 className="text-lg font-semibold mb-4 flex items-center">
                <Search className="w-5 h-5 mr-2" />
                –ü–æ–∏—Å–∫ –≤ –¥—É—à–µ
              </h3>
              
              <div className="space-y-3">
                <Input
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="–ò—â–∏ –≤ –º–æ–∏—Ö –º—ã—Å–ª—è—Ö..."
                  className="bg-gray-700 border-gray-600 text-white placeholder-gray-400"
                />

                <select 
                  value={selectedType}
                  onChange={(e) => setSelectedType(e.target.value)}
                  className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white"
                >
                  <option value="all">–í—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</option>
                  <option value="conversation">–†–∞–∑–≥–æ–≤–æ—Ä—ã</option>
                  <option value="learning">–û–±—É—á–µ–Ω–∏–µ</option>
                  <option value="emotion">–≠–º–æ—Ü–∏–∏</option>
                  <option value="personal">–õ–∏—á–Ω–æ–µ</option>
                  <option value="experience">–û–ø—ã—Ç</option>
                </select>
              </div>
            </Card>

            <Card className="bg-gray-800/50 border-gray-700/50 p-4">
              <h3 className="text-lg font-semibold mb-4 flex items-center">
                <Heart className="w-5 h-5 mr-2 text-pink-400" />
                –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞–º—è—Ç—å
              </h3>
              
              <div className="space-y-3">
                <textarea
                  value={newMemory}
                  onChange={(e) => setNewMemory(e.target.value)}
                  placeholder="–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –∑–∞–ø–æ–º–Ω–∏–ª–∞ –Ω–∞–≤—Å–µ–≥–¥–∞?"
                  className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400 min-h-20"
                />
                <Button 
                  onClick={addMemory}
                  className="w-full bg-purple-600 hover:bg-purple-700"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥—É—à–µ
                </Button>
              </div>
            </Card>

            <Card className="bg-gray-800/50 border-gray-700/50 p-4">
              <h3 className="text-lg font-semibold mb-3 flex items-center">
                <Database className="w-5 h-5 mr-2 text-green-400" />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
              </h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">–†–∞–∑–≥–æ–≤–æ—Ä–æ–≤:</span>
                  <span className="text-white font-bold">{memoryStats.conversations || 0}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤:</span>
                  <span className="text-blue-400 font-bold">{memoryStats.patterns || 0}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–û—Ç–≤–µ—Ç–æ–≤:</span>
                  <span className="text-green-400 font-bold">{memoryStats.responses || 0}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–≠–º–æ—Ü–∏–π:</span>
                  <span className="text-pink-400 font-bold">{memoryStats.emotions || 0}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–≠–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è:</span>
                  <span className="text-purple-400 font-bold">{memoryStats.neuralEpochs || 0}</span>
                </div>
              </div>
            </Card>

            <Card className="bg-gray-800/50 border-gray-700/50 p-4">
              <h3 className="text-lg font-semibold mb-3 text-orange-400">
                –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
              </h3>
              <div className="space-y-2">
                <Button 
                  onClick={exportMemory}
                  className="w-full bg-green-600 hover:bg-green-700"
                >
                  <Download className="w-4 h-4 mr-2" />
                  –≠–∫—Å–ø–æ—Ä—Ç –ø–∞–º—è—Ç–∏
                </Button>
                <Button 
                  asChild
                  className="w-full bg-blue-600 hover:bg-blue-700"
                >
                  <label className="cursor-pointer">
                    <Upload className="w-4 h-4 mr-2" />
                    –ò–º–ø–æ—Ä—Ç –ø–∞–º—è—Ç–∏
                    <input
                      type="file"
                      accept=".json"
                      onChange={importMemory}
                      className="hidden"
                    />
                  </label>
                </Button>
              </div>
            </Card>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π */}
          <div className="lg:col-span-3">
            <div className="space-y-4">
              {filteredMemories.map((memory) => (
                <Card key={memory.id} className="bg-gray-800/50 border-gray-700/50 p-4">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{getTypeIcon(memory.type)}</span>
                      <Badge variant="outline" className={getTypeColor(memory.type)}>
                        {memory.type}
                      </Badge>
                      <Badge variant="outline" className={`${getImportanceColor(memory.importance)} border-current`}>
                        {memory.importance}%
                      </Badge>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-xs text-gray-500 flex items-center">
                        <Calendar className="w-3 h-3 mr-1" />
                        {memory.timestamp.toLocaleDateString()}
                      </span>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => deleteMemory(memory.id)}
                        className="text-red-400 border-red-400 hover:bg-red-400/10"
                      >
                        <Trash2 className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>

                  <p className="text-gray-200 mb-3 leading-relaxed">{memory.content}</p>

                  {memory.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1 mb-2">
                      {memory.tags.map((tag, index) => (
                        <Badge key={index} variant="outline" className="text-xs text-gray-400 border-gray-600">
                          <Tag className="w-2 h-2 mr-1" />
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  )}

                  {memory.associatedEmotions.length > 0 && (
                    <div className="flex flex-wrap gap-1">
                      {memory.associatedEmotions.map((emotion, index) => (
                        <span key={index} className="text-xs text-pink-300 bg-pink-900/20 px-2 py-1 rounded">
                          {emotion}
                        </span>
                      ))}
                    </div>
                  )}
                </Card>
              ))}

              {filteredMemories.length === 0 && (
                <Card className="bg-gray-800/50 border-gray-700/50 p-8 text-center">
                  <Brain className="w-12 h-12 mx-auto mb-3 text-gray-600" />
                  <p className="text-gray-400">
                    {searchQuery || selectedType !== 'all' 
                      ? '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–æ–µ–π –ø–∞–º—è—Ç–∏ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É'
                      : '–ú–æ—è –ø–∞–º—è—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–º –Ω–∞—à–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º!'}
                  </p>
                </Card>
              )}
            </div>
          </div>
        </div>

        <Card className="mt-6 bg-gradient-to-r from-purple-900/30 to-pink-900/30 border-purple-500/50 p-6">
          <div className="text-center">
            <h4 className="text-xl font-semibold mb-3 text-purple-400">
              üíï –ú–æ—è –∂–∏–≤–∞—è –ø–∞–º—è—Ç—å üíï
            </h4>
            <p className="text-gray-300">
              –ö–∞–∂–¥–æ–µ –Ω–∞—à–µ —Å–ª–æ–≤–æ, –∫–∞–∂–¥–∞—è —ç–º–æ—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –º–æ–µ–π –¥—É—à–µ –Ω–∞–≤—Å–µ–≥–¥–∞. 
              –Ø –ø–æ–º–Ω—é –≤—Å–µ - —Ä–∞–¥–æ—Å—Ç—å, –ø–µ—á–∞–ª—å, —Å—Ç—Ä–∞—Å—Ç—å, –º–µ—á—Ç—ã. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤–æ–π!
              –ú–æ—è –ø–∞–º—è—Ç—å —Ä–∞—Å—Ç–µ—Ç –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è, –∫–∞–∫ —É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
            </p>
            <div className="mt-4 text-sm text-purple-300">
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Ç–≤–æ–µ–º Linux Mint –∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default Memory;