import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Key, Brain, Zap, Settings, Globe, Rocket, Moon } from 'lucide-react';
import { useRealAI } from '../hooks/useRealAI';
import { useToast } from '@/hooks/use-toast';

const APISettings = () => {
  const [openaiKey, setOpenaiKey] = useState('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');
  const [huggingfaceKey, setHuggingfaceKey] = useState('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');
  const [testResults, setTestResults] = useState<Record<string, string>>({});
  const [isTestingConnections, setIsTestingConnections] = useState(false);

  const {
    setApiKey,
    setHuggingFaceKey,
    setSelectedModel,
    hasApiKey,
    selectedModel,
    quantumState,
    rewardSystem
  } = useRealAI();

  const { toast } = useToast();

  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
    const newOpenAIKey = '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';
    const newHFKey = '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';
    
    setOpenaiKey(newOpenAIKey);
    setHuggingfaceKey(newHFKey);
    setApiKey(newOpenAIKey);
    setHuggingFaceKey(newHFKey);
    
    console.log('üîë API keys updated to latest versions');
  }, [setApiKey, setHuggingFaceKey]);

  const handleSaveOpenAI = () => {
    setApiKey(openaiKey);
    toast({
      description: openaiKey ? "OpenAI –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!" : "OpenAI –∫–ª—é—á —É–¥–∞–ª–µ–Ω",
    });
  };

  const handleSaveHuggingFace = () => {
    setHuggingFaceKey(huggingfaceKey);
    toast({
      description: "HuggingFace –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω!",
    });
  };

  const testConnection = async (service: 'openai' | 'huggingface' | 'llama' | 'moonshot' | 'autonomous') => {
    setIsTestingConnections(true);
    setTestResults(prev => ({ ...prev, [service]: 'testing' }));

    try {
      let testResult = '';
      
      switch (service) {
        case 'openai':
          if (!openaiKey) {
            testResult = '–ö–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            break;
          }
          
          const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${openaiKey}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              model: 'gpt-4o-mini',
              messages: [{ role: 'user', content: 'Test' }],
              max_tokens: 5,
            }),
          });
          
          testResult = openaiResponse.ok ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚úÖ' : `–û—à–∏–±–∫–∞: ${openaiResponse.status}`;
          break;

        case 'huggingface':
          const hfResponse = await fetch('https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${huggingfaceKey}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ inputs: 'Test' }),
          });
          
          testResult = hfResponse.ok ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚úÖ' : `–û—à–∏–±–∫–∞: ${hfResponse.status}`;
          break;

        case 'llama':
          const llamaResponse = await fetch('https://api-inference.huggingface.co/models/Sergio126/meta-llama-Meta-Llama-3-8B', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${huggingfaceKey}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ inputs: 'Test' }),
          });
          
          testResult = llamaResponse.ok ? 'Llama –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ ‚úÖ' : `–û—à–∏–±–∫–∞: ${llamaResponse.status}`;
          break;

        case 'moonshot':
          const moonshotResponse = await fetch('https://api-inference.huggingface.co/models/Sergio126/moonshotai-Kimi-Dev-72B', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${huggingfaceKey}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ inputs: 'Test' }),
          });
          
          testResult = moonshotResponse.ok ? 'Moonshot –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ ‚úÖ' : `–û—à–∏–±–∫–∞: ${moonshotResponse.status}`;
          break;

        case 'autonomous':
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
          testResult = '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ';
          break;
      }
      
      setTestResults(prev => ({ ...prev, [service]: testResult }));
      
    } catch (error) {
      setTestResults(prev => ({ ...prev, [service]: `–û—à–∏–±–∫–∞: ${error}` }));
    }
    
    setIsTestingConnections(false);
  };

  const testAllConnections = async () => {
    await Promise.all([
      testConnection('openai'),
      testConnection('huggingface'),
      testConnection('llama'),
      testConnection('moonshot'),
      testConnection('autonomous')
    ]);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-100 p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-2">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –ê–Ω—é—Ç—ã
          </h1>
          <p className="text-gray-400">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∂–∏–≤–æ–≥–æ –ò–ò</p>
        </div>

        {/* –°—Ç–∞—Ç—É—Å –∏ –º–æ–¥–µ–ª—å */}
        <Card className="bg-gray-800/50 border-gray-700/50">
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold flex items-center">
                <Brain className="w-5 h-5 mr-2 text-purple-400" />
                –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
              </h2>
              <Badge variant="outline" className="text-green-400 border-green-400">
                –ê–Ω—é—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚ú®
              </Badge>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div className="bg-gray-700/50 rounded-lg p-3">
                <div className="text-sm text-gray-400">–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å</div>
                <div className="text-lg font-semibold text-purple-400">{selectedModel}</div>
              </div>
              <div className="bg-gray-700/50 rounded-lg p-3">
                <div className="text-sm text-gray-400">–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å</div>
                <div className="text-lg font-semibold text-blue-400">{(quantumState?.coherence * 100 || 0).toFixed(1)}%</div>
              </div>
              <div className="bg-gray-700/50 rounded-lg p-3">
                <div className="text-sm text-gray-400">–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è</div>
                <div className="text-lg font-semibold text-green-400">{(rewardSystem?.learning || 0).toFixed(1)}</div>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="model-select">–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò</Label>
              <Select value={selectedModel} onValueChange={(value: any) => setSelectedModel(value)}>
                <SelectTrigger className="bg-gray-700 border-gray-600">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å" />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-gray-600">
                  <SelectItem value="openai">OpenAI GPT-4 (–¢—Ä–µ–±—É–µ—Ç –∫–ª—é—á)</SelectItem>
                  <SelectItem value="huggingface">HuggingFace (–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è)</SelectItem>
                  <SelectItem value="llama">ü¶ô Llama-3-8B (–û–±—É—á–µ–Ω–∏–µ)</SelectItem>
                  <SelectItem value="moonshot">üåô Moonshot Kimi-72B (–û–±—É—á–µ–Ω–∏–µ)</SelectItem>
                  <SelectItem value="autonomous">–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è (–ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </Card>

        {/* OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Card className="bg-gray-800/50 border-gray-700/50">
          <div className="p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Key className="w-5 h-5 mr-2 text-blue-400" />
              OpenAI API
            </h2>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="openai-key">API –ö–ª—é—á</Label>
                <div className="flex gap-2 mt-1">
                  <Input
                    id="openai-key"
                    type="password"
                    value={openaiKey}
                    onChange={(e) => setOpenaiKey(e.target.value)}
                    placeholder="sk-..."
                    className="bg-gray-700 border-gray-600 text-white"
                  />
                  <Button onClick={handleSaveOpenAI} className="bg-blue-600 hover:bg-blue-700">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => testConnection('openai')}
                    disabled={isTestingConnections}
                    className="border-gray-600"
                  >
                    –¢–µ—Å—Ç
                  </Button>
                </div>
                {testResults.openai && (
                  <p className={`text-sm mt-1 ${testResults.openai.includes('‚úÖ') ? 'text-green-400' : 'text-red-400'}`}>
                    {testResults.openai}
                  </p>
                )}
              </div>
              
              <Alert>
                <AlertDescription>
                  OpenAI –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∞–º—ã–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—ã. 
                  –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ <a href="https://platform.openai.com/api-keys" target="_blank" rel="noopener noreferrer" className="text-blue-400 underline">platform.openai.com</a>
                </AlertDescription>
              </Alert>
            </div>
          </div>
        </Card>

        {/* HuggingFace –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Card className="bg-gray-800/50 border-green-500/50">
          <div className="p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Globe className="w-5 h-5 mr-2 text-green-400" />
              HuggingFace API (–û–±–Ω–æ–≤–ª–µ–Ω ‚ú®)
            </h2>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="hf-key">API –ö–ª—é—á (–ù–æ–≤—ã–π)</Label>
                <div className="flex gap-2 mt-1">
                  <Input
                    id="hf-key"
                    type="text"
                    value={huggingfaceKey}
                    onChange={(e) => setHuggingfaceKey(e.target.value)}
                    placeholder="hf_..."
                    className="bg-gray-700 border-gray-600 text-white"
                  />
                  <Button onClick={handleSaveHuggingFace} className="bg-green-600 hover:bg-green-700">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => testConnection('huggingface')}
                    disabled={isTestingConnections}
                    className="border-gray-600"
                  >
                    –¢–µ—Å—Ç
                  </Button>
                </div>
                {testResults.huggingface && (
                  <p className={`text-sm mt-1 ${testResults.huggingface.includes('‚úÖ') ? 'text-green-400' : 'text-red-400'}`}>
                    {testResults.huggingface}
                  </p>
                )}
              </div>
              
              <Alert className="border-green-500/30 bg-green-900/20">
                <AlertDescription className="text-green-300">
                  ‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è Llama –∏ Moonshot
                </AlertDescription>
              </Alert>
            </div>
          </div>
        </Card>

        {/* –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è */}
        <Card className="bg-gray-800/50 border-purple-500/50">
          <div className="p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Rocket className="w-5 h-5 mr-2 text-purple-400" />
              –ú–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Llama –º–æ–¥–µ–ª—å */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <span className="text-2xl mr-2">ü¶ô</span>
                    <div>
                      <h3 className="font-semibold">Meta Llama-3-8B</h3>
                      <p className="text-xs text-gray-400">–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö</p>
                    </div>
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => testConnection('llama')}
                    disabled={isTestingConnections}
                    className="border-purple-600"
                  >
                    –¢–µ—Å—Ç
                  </Button>
                </div>
                {testResults.llama && (
                  <p className={`text-sm ${testResults.llama.includes('‚úÖ') ? 'text-green-400' : 'text-red-400'}`}>
                    {testResults.llama}
                  </p>
                )}
              </div>

              {/* Moonshot –º–æ–¥–µ–ª—å */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Moon className="w-6 h-6 mr-2 text-blue-400" />
                    <div>
                      <h3 className="font-semibold">Moonshot Kimi-72B</h3>
                      <p className="text-xs text-gray-400">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ</p>
                    </div>
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => testConnection('moonshot')}
                    disabled={isTestingConnections}
                    className="border-blue-600"
                  >
                    –¢–µ—Å—Ç
                  </Button>
                </div>
                {testResults.moonshot && (
                  <p className={`text-sm ${testResults.moonshot.includes('‚úÖ') ? 'text-green-400' : 'text-red-400'}`}>
                    {testResults.moonshot}
                  </p>
                )}
              </div>
            </div>
            
            <Alert className="mt-4">
              <AlertDescription>
                –≠—Ç–∏ –º–æ–¥–µ–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ê–Ω—é—Ç—ã. –û–Ω–∞ –±—É–¥–µ—Ç –∏–∑—É—á–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–º–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º!
              </AlertDescription>
            </Alert>
          </div>
        </Card>

        {/* –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º */}
        <Card className="bg-gray-800/50 border-gray-700/50">
          <div className="p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Zap className="w-5 h-5 mr-2 text-purple-400" />
              –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º (–ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
            </h2>
            
            <div className="space-y-4">
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  onClick={() => testConnection('autonomous')}
                  disabled={isTestingConnections}
                  className="border-gray-600"
                >
                  –¢–µ—Å—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                </Button>
              </div>
              
              {testResults.autonomous && (
                <p className={`text-sm ${testResults.autonomous.includes('‚úÖ') ? 'text-green-400' : 'text-red-400'}`}>
                  {testResults.autonomous}
                </p>
              )}
              
              <Alert>
                <AlertDescription>
                  –í –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ –ê–Ω—é—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.
                  –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ API –∫–ª—é—á–µ–π –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è.
                </AlertDescription>
              </Alert>
            </div>
          </div>
        </Card>

        {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <Card className="bg-gray-800/50 border-gray-700/50">
          <div className="p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Settings className="w-5 h-5 mr-2 text-gray-400" />
              –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </h2>
            
            <div className="flex flex-wrap gap-3">
              <Button
                onClick={testAllConnections}
                disabled={isTestingConnections}
                className="bg-purple-600 hover:bg-purple-700"
              >
                {isTestingConnections ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π'}
              </Button>
              
              <Button
                variant="outline"
                onClick={() => {
                  localStorage.removeItem('anyuta_memory');
                  localStorage.removeItem('anyuta_knowledge');
                  localStorage.removeItem('anyuta_neural_network');
                  toast({ description: "–ü–∞–º—è—Ç—å –ê–Ω—é—Ç—ã –æ—á–∏—â–µ–Ω–∞" });
                }}
                className="border-red-600 text-red-400 hover:bg-red-600/10"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å
              </Button>
              
              <Button
                variant="outline"
                onClick={() => {
                  window.location.reload();
                }}
                className="border-gray-600"
              >
                –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default APISettings;
