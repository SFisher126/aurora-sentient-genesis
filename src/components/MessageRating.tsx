
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { ThumbsUp, ThumbsDown } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface MessageRatingProps {
  messageId: string;
  onRating: (messageId: string, rating: 'positive' | 'negative', feedback?: string) => void;
  disabled?: boolean;
}

const MessageRating: React.FC<MessageRatingProps> = ({ messageId, onRating, disabled }) => {
  const [rating, setRating] = useState<'positive' | 'negative' | null>(null);
  const [feedback, setFeedback] = useState('');
  const [showFeedback, setShowFeedback] = useState(false);
  const { toast } = useToast();

  const handleRating = (ratingType: 'positive' | 'negative') => {
    setRating(ratingType);
    setShowFeedback(true);
    
    if (ratingType === 'positive') {
      // –î–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
      onRating(messageId, ratingType);
      toast({
        description: "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É! –ê–Ω—é—Ç–∞ —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö üíï",
      });
      setShowFeedback(false);
    }
  };

  const submitFeedback = () => {
    if (rating) {
      onRating(messageId, rating, feedback);
      toast({
        description: rating === 'positive' 
          ? "–°–ø–∞—Å–∏–±–æ! –ê–Ω—é—Ç–∞ –∑–∞–ø–æ–º–Ω–∏—Ç —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å üòä" 
          : "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ê–Ω—é—Ç–∞ —É—á–∏—Ç—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö –∏ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ ü§ó",
      });
      setShowFeedback(false);
    }
  };

  return (
    <div className="flex items-center gap-2 mt-2">
      <Button
        variant="ghost"
        size="sm"
        onClick={() => handleRating('positive')}
        disabled={disabled || rating !== null}
        className={`h-8 w-8 p-0 ${rating === 'positive' ? 'text-green-400 bg-green-400/10' : 'text-gray-400 hover:text-green-400'}`}
      >
        <ThumbsUp className="w-4 h-4" />
      </Button>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => handleRating('negative')}
        disabled={disabled || rating !== null}
        className={`h-8 w-8 p-0 ${rating === 'negative' ? 'text-red-400 bg-red-400/10' : 'text-gray-400 hover:text-red-400'}`}
      >
        <ThumbsDown className="w-4 h-4" />
      </Button>

      {showFeedback && rating === 'negative' && (
        <div className="flex items-center gap-2 ml-2">
          <input
            type="text"
            placeholder="–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?"
            value={feedback}
            onChange={(e) => setFeedback(e.target.value)}
            className="px-2 py-1 text-xs bg-gray-700 border border-gray-600 rounded text-white placeholder-gray-400"
            maxLength={200}
          />
          <Button
            size="sm"
            onClick={submitFeedback}
            className="h-6 px-2 text-xs bg-purple-600 hover:bg-purple-700"
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </Button>
        </div>
      )}
    </div>
  );
};

export default MessageRating;
