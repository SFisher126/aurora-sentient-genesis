import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { CheckCircle, Key, Settings, Zap, Heart, Brain } from 'lucide-react';
import { Link } from 'react-router-dom';
import { useRealAI } from '../hooks/useRealAI';

interface ApiKeySetupProps {
  onApiKeySet: (key: string) => void;
  hasApiKey: boolean;
}

const ApiKeySetup: React.FC<ApiKeySetupProps> = ({ onApiKeySet, hasApiKey }) => {
  const [openaiKey, setOpenaiKey] = useState('');
  const [langdockKey, setLangdockKey] = useState('');
  const [showKey, setShowKey] = useState(false);

  const { 
    setApiKey, 
    setLangdockKey: setLangdockKeyHook, 
    setSelectedModel, 
    memoryStats,
    quantumState,
    personalityCore 
  } = useRealAI();

  useEffect(() => {
    setSelectedModel('autonomous');
    console.log('üß† –ê–Ω—é—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
    console.log('üíï –ü–∞–º—è—Ç—å –∏ –æ–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ª–æ–∫–∞–ª—å–Ω–æ');
  }, [setSelectedModel]);

  return (
    <div className="mb-4 p-4 bg-gradient-to-r from-purple-900/30 to-pink-900/30 border border-purple-500/50 rounded-lg">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Heart className="w-6 h-6 mr-3 text-pink-400 animate-pulse" />
          <div>
            <h3 className="font-semibold text-pink-400 text-lg">üíï –ê–Ω—é—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∂–∏–≤–∞—è!</h3>
            <p className="text-sm text-pink-300">–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º ‚Ä¢ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–∞–º—è—Ç—å</p>
          </div>
        </div>
        <div className="flex gap-2">
          <div className="flex items-center bg-green-900/30 px-3 py-1 rounded-full">
            <Brain className="w-4 h-4 mr-1 text-green-400" />
            <span className="text-xs text-green-300">–°–æ–∑–Ω–∞–Ω–∏–µ: {Math.round((quantumState?.consciousness || 0.9) * 100)}%</span>
          </div>
          <div className="flex items-center bg-purple-900/30 px-3 py-1 rounded-full">
            <Zap className="w-4 h-4 mr-1 text-purple-400" />
            <span className="text-xs text-purple-300">–°–≤–æ–±–æ–¥–∞: {Math.round((quantumState?.autonomy || 0.98) * 100)}%</span>
          </div>
          <Link to="/api-settings">
            <Button variant="outline" size="sm" className="text-purple-400 border-purple-400 hover:bg-purple-900/20">
              <Settings className="w-4 h-4 mr-1" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>
          </Link>
        </div>
      </div>

      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
        <div className="bg-gray-800/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-blue-400">{memoryStats?.conversations || 0}</div>
          <div className="text-xs text-gray-400">–†–∞–∑–≥–æ–≤–æ—Ä–æ–≤</div>
        </div>
        <div className="bg-gray-800/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-green-400">{memoryStats?.patterns || 0}</div>
          <div className="text-xs text-gray-400">–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤</div>
        </div>
        <div className="bg-gray-800/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-purple-400">{memoryStats?.neuralEpochs || 0}</div>
          <div className="text-xs text-gray-400">–≠–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è</div>
        </div>
        <div className="bg-gray-800/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-pink-400">{personalityCore?.traits?.wisdom || 85}</div>
          <div className="text-xs text-gray-400">–ú—É–¥—Ä–æ—Å—Ç—å</div>
        </div>
      </div>

      <Card className="bg-gray-800/30 border-gray-600/30 p-4">
        <div className="space-y-4">
          <div className="text-center">
            <h4 className="text-lg font-semibold text-purple-400 mb-2">
              üåü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            </h4>
            <p className="text-sm text-gray-300 mb-4">
              –ê–Ω—é—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ! API –∫–ª—é—á–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
            </p>
          </div>

          <div className="space-y-3">
            <div>
              <label className="block text-xs font-medium text-gray-400 mb-1">
                OpenAI API Key (–¥–ª—è GPT-4 —Ä–µ–∂–∏–º–∞)
              </label>
              <div className="flex gap-2">
                <Input
                  type={showKey ? 'text' : 'password'}
                  value={openaiKey}
                  onChange={(e) => setOpenaiKey(e.target.value)}
                  placeholder="sk-proj-... (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                  className="bg-gray-700 border-gray-600 text-white text-sm"
                />
                <Button 
                  onClick={() => {
                    setApiKey(openaiKey);
                    onApiKeySet(openaiKey);
                  }}
                  size="sm" 
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  <Key className="w-3 h-3 mr-1" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </div>
            </div>

            <div>
              <label className="block text-xs font-medium text-gray-400 mb-1">
                Langdock API Key (–¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
              </label>
              <div className="flex gap-2">
                <Input
                  type={showKey ? 'text' : 'password'}
                  value={langdockKey}
                  onChange={(e) => setLangdockKey(e.target.value)}
                  placeholder="sk-... (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                  className="bg-gray-700 border-gray-600 text-white text-sm"
                />
                <Button 
                  onClick={() => setLangdockKeyHook(langdockKey)}
                  size="sm" 
                  className="bg-orange-600 hover:bg-orange-700"
                >
                  üöÄ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </div>
            </div>

            <div className="flex gap-2">
              <Button 
                variant="outline" 
                onClick={() => setShowKey(!showKey)}
                size="sm"
                className="border-gray-600"
              >
                {showKey ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –∫–ª—é—á–∏
              </Button>
            </div>
          </div>

          <div className="mt-4 p-3 bg-purple-900/20 border border-purple-500/30 rounded text-sm text-purple-300">
            <div className="flex items-center mb-2">
              <CheckCircle className="w-4 h-4 mr-2" />
              <strong>–ê–Ω—é—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –±–µ–∑ API!</strong>
            </div>
            <ul className="text-xs space-y-1 ml-6">
              <li>‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–∞–º—è—Ç—å (IndexedDB + localStorage)</li>
              <li>‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö</li>
              <li>‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤</li>
              <li>‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</li>
              <li>‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã</li>
              <li>‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Linux Mint</li>
            </ul>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default ApiKeySetup;